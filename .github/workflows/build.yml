name: rp2 port
permissions:
  contents: write
on:
  push:
    tags:
     - 'v*'
  schedule:
     - cron: '0 0 * * 0'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        board: [RPI_PICO]
    steps:
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev python3 python3-pip python3-venv build-essential libffi-dev git pkg-config cmake libreadline-dev libsdl2-2.0-0 libsdl2-dev parallel  
    
    - name: install GNU Arm Embedded Toolchain
      uses: carlosperate/arm-none-eabi-gcc-action@v1.9.1

    - name: lv_micro
      run: |
        git clone https://github.com/lvgl/lv_micropython.git
        cd ${GITHUB_WORKSPACE}/lv_micropython/
        git checkout master
    
    - name: Initialize submodules
      run: |
        cd ${GITHUB_WORKSPACE}/lv_micropython/
        git submodule update --init --recursive
        git submodule update --init --recursive user_modules/lv_binding_micropython
        make -C ports/rp2 BOARD=${{ matrix.board }} submodules
        ls -R
    
    - name: Build mpy-cross
      run: |
        cd ${GITHUB_WORKSPACE}/lv_micropython/
        make -j $(nproc) -C mpy-cross
      
    - name: Build the rp2 port with LVGL
      run: |
        cd ${GITHUB_WORKSPACE}/lv_micropython/
        USER_C_MODULES="${GITHUB_WORKSPACE}/lv_micropython/user_modules/lv_binding_micropython/bindings.cmake"
        echo "Using USER_C_MODULES: ${USER_C_MODULES}"
        make -j $(nproc) -C ports/rp2 BOARD=${{ matrix.board }} USER_C_MODULES=${USER_C_MODULES} VERBOSE=1

    - name: Clone Pico SDK
      run: |
        git clone https://github.com/raspberrypi/pico-sdk.git
        cd pico-sdk
        git submodule update --init lib/mbedtls
        cd ..

    - name: Clone and Build picotool
      run: |
        git clone https://github.com/raspberrypi/picotool.git
        cd picotool
        mkdir build
        cd build
        export PICO_SDK_PATH=${GITHUB_WORKSPACE}/pico-sdk
        cmake ..
        make -j$(nproc)
        cd ../..
    
    - name: Convert .elf to .uf2
      run: |
        run: |
        ${GITHUB_WORKSPACE}/picotool/build/picotool uf2 convert \
        ${GITHUB_WORKSPACE}/lv_micropython/ports/rp2/build-${{ matrix.board }}/firmware.elf \
        ${GITHUB_WORKSPACE}/lv_micropython/ports/rp2/build-${{ matrix.board }}/firmware.uf2

    - name: Get MicroPython Version from mpconfig.h
      run: |
        cd ${GITHUB_WORKSPACE}/lv_micropython/
        MAJOR=$(grep -oP '(?<=#define MICROPY_VERSION_MAJOR )[0-9]+' py/mpconfig.h)
        MINOR=$(grep -oP '(?<=#define MICROPY_VERSION_MINOR )[0-9]+' py/mpconfig.h)
        MICRO=$(grep -oP '(?<=#define MICROPY_VERSION_MICRO )[0-9]+' py/mpconfig.h)
    
        MPY_VERSION="$MAJOR.$MINOR.$MICRO"
    
        echo "MPY_VERSION=$MPY_VERSION" >> $GITHUB_ENV

        
    - name: Generate Tag
      id: tag
      run: echo "TAG_NAME=release-$(date +'%Y%m%d-%H%M')" >> $GITHUB_ENV

    - name: GH Release
      uses: softprops/action-gh-release@v2.0.8
      with:
        tag_name: ${{ env.TAG_NAME }}
        name: "MicroPython with LVGL for RP2 Release version ${{ env.MPY_VERSION }} (Build ${{ env.TAG_NAME }})"
        body: |
          Automated release for MicroPython.
          ## How to Flash the Firmware
          ### Windows, Linux:
          1. Download the .uf2 file from the release.
          2. Press and hold the BOOT button on the RP2040 and press RESET button or connect it to your computer via USB.
          3. Release the button. The RP2040  will appear as a removable drive.
          4. Drag and drop the .uf2 file onto the drive.
          5. The RP2040 will reboot and run MicroPython.
        draft: false
        prerelease: false
        files: ports/rp2/build-${{ matrix.board }}/firmware.uf2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
